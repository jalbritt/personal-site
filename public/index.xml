<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>jalbritt.site</title>
    <link>https://jalbritt.site/</link>
    <description>Recent content on jalbritt.site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 20 Mar 2024 12:20:11 -0500</lastBuildDate>
    <atom:link href="https://jalbritt.site/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GitOps with ArgoCD</title>
      <link>https://jalbritt.site/posts/gitops-argo/</link>
      <pubDate>Wed, 20 Mar 2024 12:20:11 -0500</pubDate>
      <guid>https://jalbritt.site/posts/gitops-argo/</guid>
      <description>With ArgoCD, we can make sure that the state of our kubernetes apps match their desired configurations as defined by code in GitHub. When changes happen in GitHub, ArgoCD will automatically deploy them to the cluster. Taking this apporoach guarantees that any manual changes to the cluster are overwritten by the configuration defined in GitHub.
First, we need a kubernetes cluster to install ArgoCD. For this example, I created one using Terraform.</description>
    </item>
    <item>
      <title>Quickly build and deploy a site with Hugo and Cloudflare Pages</title>
      <link>https://jalbritt.site/posts/hugo-cloudflare-site/</link>
      <pubDate>Wed, 13 Mar 2024 16:52:48 -0500</pubDate>
      <guid>https://jalbritt.site/posts/hugo-cloudflare-site/</guid>
      <description>It&amp;rsquo;s free, fast, and easy to manage: three reasons why I decided to deploy this Hugo site using Cloudflare Pages. Hugo is a static site generator and content management system that allows users to write content in markdown. Cloudflare pages is a free static site hosting service that ensures your site loads quickly from anywhere in the world.
Step 1: Hugo Quickstart Step 2: Deploy a Hugo Site Those are the steps!</description>
    </item>
    <item>
      <title>Managing Infrastructure as Code with Terraform</title>
      <link>https://jalbritt.site/posts/infrastructure-as-code/</link>
      <pubDate>Wed, 13 Mar 2024 16:26:09 -0500</pubDate>
      <guid>https://jalbritt.site/posts/infrastructure-as-code/</guid>
      <description>Having infrastructure as code (IaC) means we can better manage software infrastructure components throughout their lifecycles. Terraform provides a way to responsibly manage infrastructure state at scale and has achieved mass adoption in industry as an open-source project. You can tell terraform what exactly you would like to create, and terraform gives you a plan showing the configuration changes that will happen upon approval. Here&amp;rsquo;s an example of some terraform code that could be used to create a storage bucket in Google Cloud Platform.</description>
    </item>
    <item>
      <title>About</title>
      <link>https://jalbritt.site/about-me/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://jalbritt.site/about-me/</guid>
      <description>Hello! ðŸ‘‹ Welcome to my personal website! I&amp;rsquo;m James Albritton, a software developer specializing in cloud infrastructure. Most recently, I was a software engineer in the platform product group at WP Engine, and prior to that, I was a software engineer in corporate IT at Dell Technologies.
In both roles, the teams worked across GCP, Azure, and AWS clouds. At Dell, I built a service broker which provisions GCP projects for internal development teams using C#.</description>
    </item>
  </channel>
</rss>
